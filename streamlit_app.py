# =================================================================
# 1. Import ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
# =================================================================
import streamlit as st
from datetime import datetime
from PIL import Image
from collections import Counter
import numpy as np
import cv2
import io
import os
from roboflow import Roboflow
import time
import shutil
import pandas as pd
import plotly.express as px
import random

# =================================================================
# 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö, UI Styles, ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
# =================================================================
st.set_page_config(page_title="CRI Genius", layout="wide")

st.markdown(
    """
    <div style="
        background: linear-gradient(to right, #6FC3FF, #2176FF);
        border-radius: 12px;
        padding: 10px 0;
        text-align: center;
        font-size: 28px;
        font-weight: bold;
        color: white;
        margin-bottom: 20px;
    ">
        CRI Genius
    </div>
    """,
    unsafe_allow_html=True
)
st.markdown("""
<style>
.inline-label {
    display: flex; align-items: center; gap: 8px; font-weight: bold;
    font-size: 18px; color: black; margin-bottom: 5px;
}
.inline-label img { width: 24px; height: 24px; }
.stTextInput input, .stDateInput input, .stSelectbox > div > div {
    background-color: #e6f2ff !important; border-radius: 8px !important; color: black !important;
}
.stTextInput input:disabled {
    background-color: #d0e0f0 !important; font-weight: bold; text-align: center; color: black !important;
}
div.stButton > button {
    background: linear-gradient(to right, #6FC3FF, #2176FF); color: black;
    font-weight: bold; border-radius: 25px; padding: 10px 40px; font-size: 18px;
}
</style>
""", unsafe_allow_html=True)

@st.cache_resource
def load_models():
    """‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å Roboflow ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô tuple"""
    try:
        DETECTOR_API_KEY = "FIv4Ev7vj8vn5EGPeTpY"
        CLASSIFIER_API_KEY = "FIv4Ev7vj8vn5EGPeTpY"
        detector_model = Roboflow(api_key=DETECTOR_API_KEY).workspace("wattanathornch").project("crystal_quality_detection").version(9).model
        classifier_model = Roboflow(api_key=CLASSIFIER_API_KEY).workspace("wattanathornch").project("crystal_quality").version(1).model
        return detector_model, classifier_model
    except Exception as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ AI ‡πÑ‡∏î‡πâ: {e}")
        return None, None

def save_results_to_csv(data, filename="analysis_history.csv"):
    df = pd.DataFrame([data])
    file_exists = os.path.exists(filename)
    df.to_csv(filename, mode='a', index=False, header=not file_exists, encoding='utf-8-sig')

detector_model, classifier_model = load_models()
if 'analysis_results' not in st.session_state:
    st.session_state.analysis_results = None

# =================================================================
# 3. ‡∏™‡πà‡∏ß‡∏ô UI ‡πÅ‡∏•‡∏∞ Logic ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
# =================================================================
col_main_left, col_main_right = st.columns([1, 1.2])

with col_main_left:
    st.markdown("""<div class="inline-label"><img src="https://img.icons8.com/ios-filled/50/2176FF/calendar--v1.png"/><span>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</span></div>""", unsafe_allow_html=True)
    st.date_input("", datetime.today(), key="date_input", label_visibility="collapsed")
    
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("""<div class="inline-label"><img src="https://img.icons8.com/ios-filled/50/2176FF/edit--v1.png"/><span>Stike</span></div>""", unsafe_allow_html=True)
        st.text_input("", key="stike", label_visibility="collapsed")
    with col2:
        st.markdown("""<div class="inline-label"><img src="https://img.icons8.com/ios-filled/50/2176FF/bookmark-ribbon--v1.png"/><span>class</span></div>""", unsafe_allow_html=True)
        st.selectbox("", ["SR", "R", "W100", "W150"], key="class_selection", label_visibility="collapsed")
    
    col3, col4 = st.columns(2)
    with col3:
        st.markdown("""<div class="inline-label"><img src="https://img.icons8.com/ios-filled/50/2176FF/user.png"/><span>‡∏ú‡∏π‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</span></div>""", unsafe_allow_html=True)
        st.text_input("", key="analyst", label_visibility="collapsed", help="‡∏û‡∏¥‡∏°‡∏û‡πå 'test1' (‡∏™‡∏∏‡πà‡∏°) ‡∏´‡∏£‡∏∑‡∏≠ 'test2' (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    with col4:
        st.markdown("""<div class="inline-label"><img src="https://img.icons8.com/ios-filled/50/2176FF/worker-male.png"/><span>‡∏ä‡πà‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡πà‡∏¢‡∏ß</span></div>""", unsafe_allow_html=True)
        st.text_input("", key="operator", label_visibility="collapsed")

    uploaded_file = st.file_uploader("### üì∑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà", type=["jpg", "jpeg", "png"])
    
    process_button = st.button("‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")

if process_button:
    st.session_state.analysis_results = None 

    if uploaded_file is None:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
    elif not detector_model or not classifier_model:
        st.error("‚ùå ‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ")

    elif st.session_state.get("analyst") == "test1":
        st.info("‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
            time.sleep(1)
            image_pil_test = Image.open(uploaded_file).convert("RGB")
            N3 = random.randint(10, 50)
            N2 = random.randint(20, 60)
            N1 = random.randint(5, 30)
            N0 = random.randint(0, 10)
            total_grains = N3 + N2 + N1 + N0
            numerator = (3*N3) + (2*N2) + (1*N1) + (0*N0)
            denominator = 3 * total_grains
            cri_score = (numerator / denominator) * 100 if denominator > 0 else 0
            
            st.session_state.analysis_results = {
                "N3": N3, "N2": N2, "N1": N1, "N0": N0,
                "total_grains": total_grains, "cri": cri_score,
                "processed_image": image_pil_test, "total_detected": total_grains + random.randint(5, 20)
            }
        st.success("‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        st.rerun()

    elif st.session_state.get("analyst") == "test2":
        st.info("‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö 2: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏á‡∏ó‡∏µ‡πà")
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
            time.sleep(1)
            image_pil_test = Image.open(uploaded_file).convert("RGB")
            st.session_state.analysis_results = {
                "N3": 17, "N2": 43, "N1": 26, "N0": 9, "total_grains": 95,
                "cri": 57.19, "processed_image": image_pil_test, "total_detected": 109 
            }
        st.success("‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        st.rerun()

    else:
        try:
            with st.spinner("üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ AI... (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà)"):
                confidence_threshold = 40 # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà (40%)
                image_pil = Image.open(uploaded_file).convert("RGB")
                
                temp_path_detector = "temp_detector.jpg"
                image_pil.save(temp_path_detector)
                detections = detector_model.predict(temp_path_detector, confidence=5, overlap=30).json().get('predictions', [])
                os.remove(temp_path_detector)

                full_results = []
                temp_crop_dir = "temp_crops"
                os.makedirs(temp_crop_dir, exist_ok=True)
                
                progress_bar = st.progress(0, text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó...")
                for i, detection in enumerate(detections):
                    try:
                        x,y,w,h = float(detection.get('x',0)),float(detection.get('y',0)),float(detection.get('width',0)),float(detection.get('height',0))
                        if w <= 0 or h <= 0: continue
                        
                        cropped_img = image_pil.crop((int(x-w/2), int(y-h/2), int(x+w/2), int(y+h/2)))
                        predicted_class, confidence = None, 0.0
                        try:
                            temp_predict_path = os.path.join(temp_crop_dir, f"predict_{i}.jpg")
                            cropped_img.save(temp_predict_path)
                            raw_result = classifier_model.predict(temp_predict_path, confidence=0).json()
                            if 'top' in raw_result and raw_result['top'] != "":
                                predicted_class = raw_result.get('top')
                                confidence = raw_result.get('confidence', 0.0)
                        except Exception:
                            pass
                        
                        full_results.append({"class": predicted_class, "confidence": confidence})
                    except Exception:
                        continue
                    progress_bar.progress((i + 1) / len(detections), text=f"‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏ú‡∏•‡∏∂‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà {i+1}/{len(detections)}")
                
                progress_bar.empty()
                if os.path.exists(temp_crop_dir):
                    shutil.rmtree(temp_crop_dir)

                confident_results = []
                for res in full_results:
                    if res.get('class') and (res.get('confidence', 0) * 100 >= confidence_threshold):
                        confident_results.append(res)
                
                classified_classes = [res['class'] for res in confident_results]
                total_grains = len(classified_classes)
                grade_counts = Counter(classified_classes)

                N3, N2, N1, N0 = grade_counts.get('class 3',0), grade_counts.get('class 2',0), grade_counts.get('class 1',0), grade_counts.get('class 0',0)
                
                cri_score = 0.0
                if total_grains > 0:
                     numerator = (3 * N3) + (2 * N2) + (1 * N1) + (0 * N0)
                     denominator = 3 * total_grains
                     cri_score = (numerator / denominator) * 100

                st.session_state.analysis_results = {
                    "N3": N3, "N2": N2, "N1": N1, "N0": N0,
                    "total_grains": total_grains,
                    "total_detected": len(detections),
                    "cri": cri_score,
                    "processed_image": image_pil
                }

            st.success("‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            st.info("‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ 'üìä Graph Analysis' ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)")
        except Exception as e:
            st.error(f"üò≠ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•!")
            st.exception(e)
        
        st.rerun()

with col_main_right:
    results = st.session_state.analysis_results

    if results:
        st.image(results["processed_image"], caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", use_container_width=True)
    elif uploaded_file:
        st.image(uploaded_file, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•)", use_container_width=True)
    else:
        placeholder_image = np.full((400, 600, 3), 240, dtype=np.uint8)
        cv2.putText(placeholder_image, "Upload an image to start", (50, 200), cv2.FONT_HERSHEY_SIMPLEX, 1, (150, 150, 150), 2)
        st.image(placeholder_image, caption="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà", use_container_width=True)

    if results:
        total_detected = results.get("total_detected", 0)
        total_classified_confidently = results.get("total_grains", 0)
        st.info(f"AI ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ú‡∏•‡∏∂‡∏Å **{total_detected}** ‡∏ä‡∏¥‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à **{total_classified_confidently}** ‡∏ä‡∏¥‡πâ‡∏ô")

    st.markdown("### ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏°‡πá‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•")

    N3 = results.get("N3", 0) if results else 0
    N2 = results.get("N2", 0) if results else 0
    N1 = results.get("N1", 0) if results else 0
    N0 = results.get("N0", 0) if results else 0
    total_grains = results.get("total_grains", 0) if results else 0
    cri = results.get("cri", 0.0) if results else 0
    
    p3 = (N3 / total_grains * 100) if total_grains > 0 else 0
    p2 = (N2 / total_grains * 100) if total_grains > 0 else 0
    p1 = (N1 / total_grains * 100) if total_grains > 0 else 0
    p0 = (N0 / total_grains * 100) if total_grains > 0 else 0
    
    data_to_display = [{"class": 3, "count": N3, "percent": p3}, {"class": 2, "count": N2, "percent": p2},
                       {"class": 1, "count": N1, "percent": p1}, {"class": 0, "count": N0, "percent": p0}]

    for item in data_to_display:
        g, c, m, p, pct = st.columns([1, 1, 0.5, 1, 0.5])
        with g: st.markdown(f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {item['class']}")
        with c: st.text_input("", str(item['count']), disabled=True, key=f"d_c_{item['class']}", label_visibility="collapsed")
        with m: st.markdown("‡πÄ‡∏°‡πá‡∏î")
        with p: st.text_input("", f"{item['percent']:.2f}", disabled=True, key=f"d_p_{item['class']}", label_visibility="collapsed")
        with pct: st.markdown("%")

    t1, t2, t3, t4, t5 = st.columns([1, 1, 0.5, 1, 0.5])
    with t1: st.markdown("**Total**")
    with t2: st.markdown(f"**{total_grains}**")
    with t3: st.markdown("‡πÄ‡∏°‡πá‡∏î")
    with t4: st.markdown(f"**{p3+p2+p1+p0:.2f}**")
    with t5: st.markdown("%")
    
    st.markdown("### **%CRI**")
    st.text_input("", f"{cri:.2f} %", disabled=True, key="d_cri", label_visibility="collapsed")

    if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", key="save_button"):
        if results:
            try:
                record_data = {
                    "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "analysis_date": st.session_state.get("date_input").strftime("%Y-%m-%d"),
                    "strike": st.session_state.get("stike"),
                    "class_selection": st.session_state.get("class_selection"),
                    "analyst": st.session_state.get("analyst"),
                    "operator": st.session_state.get("operator"),
                    "total_detected": results.get("total_detected", 0),
                    "total_classified": results.get("total_grains", 0),
                    "class_3_count": results.get("N3", 0),
                    "class_2_count": results.get("N2", 0),
                    "class_1_count": results.get("N1", 0),
                    "class_0_count": results.get("N0", 0),
                    "cri_score": f"{results.get('cri', 0.0):.2f}"
                }
                save_results_to_csv(record_data)
                st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {e}")
        else:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")

    CSV_FILENAME = "analysis_history.csv"
    if os.path.exists(CSV_FILENAME):
        with open(CSV_FILENAME, "rb") as f:
            st.download_button(
                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (CSV)",
                data=f,
                file_name=CSV_FILENAME,
                mime="text/csv",
                key="download_csv_button"
            )

# =================================================================
# 4. ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ù‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢)
# =================================================================
with col_main_left:
    if st.session_state.analysis_results:
        st.markdown("---")
        st.subheader("‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏∂‡∏Å")
        
        results_for_graph = st.session_state.analysis_results
        
        chart_data = {
            'Class': ['Class 3', 'Class 2', 'Class 1', 'Class 0'],
            'Count': [
                results_for_graph.get("N3", 0), results_for_graph.get("N2", 0),
                results_for_graph.get("N1", 0), results_for_graph.get("N0", 0)
            ]
        }
        df_chart = pd.DataFrame(chart_data)

        fig_bar = px.bar(
            df_chart[df_chart['Count'] > 0],
            x='Class', y='Count', color='Class', text_auto=True,
            color_discrete_map={
                'Class 3': '#4CAF50', 'Class 2': '#8BC34A',
                'Class 1': '#FFC107', 'Class 0': '#F44336'
            },
            labels={'Count': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡πá‡∏î', 'Class': ''}
        )
        fig_bar.update_layout(showlegend=False, yaxis_title=None, xaxis_title=None)
        fig_bar.update_traces(textposition='outside')
        st.plotly_chart(fig_bar, use_container_width=True)
